version: '3.5'

services:
  worker:
    container_name: rag101-worker
    build:
      context: ./services/worker
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    networks:
      - default
    env_file:
      - .env
    volumes:
      # Shared volume for logs
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/logs:/app/logs
      # Shared modules (required for imports)
      - ./shared:/app/shared:ro
      # Temporary processing files
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/temp:/app/temp
    environment:
      # Infrastructure connections
      - NATS_URL=nats://nats:4222
      - MILVUS_HOST=standalone
      - MILVUS_PORT=19530
      
      # Processing configuration
      - MAX_DOCUMENT_WORKERS=2
      - MAX_EMBEDDING_WORKERS=2
      - MAX_QUESTION_WORKERS=2
      - MESSAGE_TTL=3600
      - SESSION_TTL=3600
      
      # AI configuration
      - EMBEDDING_MODEL=text-embedding-004
      - CHAT_MODEL=gemini-pro
      - VECTOR_DIMENSION=768
      
      # Logging and monitoring
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app:/app/services/worker
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      standalone:
        condition: service_healthy
      nats:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; from main import WorkerService; print('healthy')"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3
    labels:
      - "com.rag101.service=worker"
      - "com.rag101.component=backend"

  api:
    container_name: rag101-api
    build:
      context: ./services/api
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - default
    env_file:
      - .env
    volumes:
      # Shared volume for logs
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/logs:/app/logs
      # Shared modules (required for imports)
      - ./shared:/app/shared:ro
    environment:
      # Infrastructure connections
      - NATS_URL=nats://nats:4222
      - MILVUS_HOST=standalone
      - MILVUS_PORT=19530
      
      # API configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - WORKERS=1
      - SESSION_TTL=3600
      
      # Rate limiting
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      
      # CORS configuration
      - CORS_ORIGINS=http://localhost:8501,http://ui:8501
      
      # AI configuration
      - EMBEDDING_MODEL=text-embedding-004
      - CHAT_MODEL=gemini-pro
      - VECTOR_DIMENSION=768
      
      # Logging and monitoring
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app:/app/services/api
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      standalone:
        condition: service_healthy
      nats:
        condition: service_started
      worker:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      start_period: 40s
      retries: 3
    labels:
      - "com.rag101.service=api"
      - "com.rag101.component=backend"

  ui:
    container_name: rag101-ui
    build:
      context: ./services/ui
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    ports:
      - "8501:8501"
    networks:
      - default
    env_file:
      - .env
    volumes:
      # Shared volume for logs
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/logs:/app/logs
      # Shared modules (required for imports)
      - ./shared:/app/shared:ro
      # UI data persistence
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/ui-data:/app/data
    environment:
      # Service connections
      - API_BASE_URL=http://api:8000
      - WS_BASE_URL=ws://api:8000
      - NATS_URL=nats://nats:4222
      
      # UI configuration
      - SESSION_TTL=3600
      - AUTO_REFRESH_INTERVAL=30
      - DEBUG=false
      
      # Streamlit configuration
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
      
      # Logging
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app:/app/services/ui
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      api:
        condition: service_healthy
      nats:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      start_period: 45s
      retries: 3
    labels:
      - "com.rag101.service=ui"
      - "com.rag101.component=frontend"

networks:
  default:
    name: milvus
    external: true

volumes:
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/logs
  temp:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/temp
  ui-data:
    driver: local
    driver_opts:
      type: none
      o: bind  
      device: ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/ui-data